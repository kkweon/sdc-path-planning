* Path Planning Project

#+HTML: <div align="center"><img src="assets/demo.gif" alt="demo" width="512" height="512" /></div>

The goal of this project is to

- create path planning trajectories
- drive the highway without jerky moves
- keep speed limit (50 mph) as close as possible

** How it works

There are actually two steps in this project.

- State Machine :: Decides an action such as (keep driving or lane change)
- Plan Trajectories :: plan the trajectories to follow the decision made by the state machine

*** State machine
I used a simple model such that

1. it checks the distance to the front car (if none, keep straight)
2. if the car is going slow, check left or right lane if it's safe to change a lane
3. change a lane if it's safe

*** Planning trajectories
It's the most difficult part of the project.
First, conversion to fernet coordinate makes thing much simpler.

[[assets/fernet.png]]

Fernet coordinate is just like the cartesian coordinates but it's respect to the road.
Thus, it will be straight line even if the road is wavy.



** Sensor Data

Each step, the agent receives JSON data from the simulator

#+BEGIN_SRC js
  [
    "telemetry",
    {
      d: 6.164833,
      end_path_d: 0,
      end_path_s: 0,
      previous_path_x: [],
      previous_path_y: [],
      s: 124.8336,
      // Format: [ id, x, y, vx, vy, s, d]
      sensor_fusion: [
        [0, 775.99, 1421.6, 0, 0, 6721.839, -277.6729],
        [1, 775.8, 1425.2, 0, 0, 6719.219, -280.1494],
        [2, 775.8, 1429, 0, 0, 6716.599, -282.9019],
        [3, 775.8, 1432.9, 0, 0, 6713.911, -285.7268],
        [4, 775.8, 1436.3, 0, 0, 6711.566, -288.1896],
        [5, 775.8, 1441.7, 0, 0, 6661.772, -291.7797],
        [6, 762.1, 1421.6, 0, 0, 6711.778, -268.0964],
        [7, 762.1, 1425.2, 0, 0, 6709.296, -270.7039],
        [8, 762.1, 1429, 0, 0, 6663.543, -273.1828],
        [9, 762.1, 1432.9, 0, 0, 6660.444, -275.5511],
        [10, 762.1, 1436.3, 0, 0, 6657.743, -277.6157],
        [11, 762.1, 1441.7, 0, 0, 6653.453, -280.8947]
      ],
      speed: 0,
      x: 909.48,
      y: 1128.67,
      yaw: 0
    }
  ];
#+END_SRC


** Installation
*** Simulator
You must download the simulator  from the [releases tab](https://github.com/udacity/self-driving-car-sim/releases).

*** Basic Build Instructions

1. Clone this repo.
2. Make a build directory: `mkdir build && cd build`
3. Compile: `cmake .. && make`
4. Run it: `./path_planning`.

Here is the data provided from the Simulator to the C++ Program

*Main car's localization Data (No Noise)*

- ["x"] The car's x position in map coordinates
- ["y"] The car's y position in map coordinates
- ["s"] The car's s position in frenet coordinates
- ["d"] The car's d position in frenet coordinates
- ["yaw"] The car's yaw angle in the map
- ["speed"] The car's speed in MPH

*Previous path data given to the Planner*

//Note: Return the previous list but with processed points removed, can be a nice tool to show how far along
the path has processed since last time.

- ["previous_path_x"] The previous list of x points previously given to the simulator
- ["previous_path_y"] The previous list of y points previously given to the simulator

*Previous path's end s and d values*
- ["end_path_s"] The previous list's last point's frenet s value
- ["end_path_d"] The previous list's last point's frenet d value

*Sensor Fusion Data, a list of all other car's attributes on the same side of the road. (No Noise)*
- ["sensor_fusion"] A 2d vector of cars and then that car's [car's unique ID, car's x position in map coordinates, car's y position in map coordinates, car's x velocity in m/s, car's y velocity in m/s, car's s position in frenet coordinates, car's d position in frenet coordinates.

** Notes

1. The car uses a perfect controller and will visit every (x,y) point it recieves in the list every .02 seconds. The units for the (x,y) points are in meters and the spacing of the points determines the speed of the car. The vector going from a point to the next point in the list dictates the angle of the car. Acceleration both in the tangential and normal directions is measured along with the jerk, the rate of change of total Acceleration. The (x,y) point paths that the planner recieves should not have a total acceleration that goes over 10 m/s^2, also the jerk should not go over 50 m/s^3. (NOTE: As this is BETA, these requirements might change. Also currently jerk is over a .02 second interval, it would probably be better to average total acceleration over 1 second and measure jerk from that.

2. There will be some latency between the simulator running and the path planner returning a path, with optimized code usually its not very long maybe just 1-3 time steps. During this delay the simulator will continue using points that it was last given, because of this its a good idea to store the last points you have used so you can have a smooth transition. previous_path_x, and previous_path_y can be helpful for this transition since they show the last points given to the simulator controller with the processed points already removed. You would either return a path that extends this previous path or make sure to create a new path that has a smooth transition with this last path.
